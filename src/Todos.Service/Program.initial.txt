// See https://aka.ms/new-console-template for more information

var userType = UserType.Jacek;


// Inversion of Control
// Przygotowanie
IValuesProvider valuesProvider = (userType == UserType.Janek) ? new UpparcasedValueProvider(new ValuesProvider()) : new ValuesProvider();
IValuesPrinter valuesPrinter = (userType == UserType.Janek) ? new ConsolePrinter() : new FilePrinter(); 

// Wykonanie
valuesPrinter.Print(valuesProvider);



public interface IValuesPrinter
{
    public void Print(IValuesProvider provider);
}

public class ConsolePrinter : IValuesPrinter
{
    public void Print(IValuesProvider provider)
    {
        foreach (var value in provider.GetValues())
        {
            Console.WriteLine(value);
        }
    }
}

public class FilePrinter : IValuesPrinter
{
    public void Print(IValuesProvider provider)
    {
        foreach (var value in provider.GetValues())
        {
            Console.WriteLine($"w pliku: {value}");
        }
    }
}

public interface IValuesProvider 
{
    public IEnumerable<string> GetValues();
}

public static class ValuesProvideHelper
{
    public static IEnumerable<string> Filter(this IValuesProvider provider, Predicate<string> condition)
    {
        foreach (var word in provider.GetValues())
        {
            if (condition(word)) 
            {
                yield return word;
            }
        }
    }

    public static IEnumerable<string> GetOnlyNLettersWords(this IValuesProvider provider, int destinatedLength) =>
       provider.Filter(x => x.Length == destinatedLength);
    

    public static IEnumerable<string> GetOnlyCapitalLetterWords(this IValuesProvider provider) =>
       provider.Filter(word => word.Length > 0 && char.IsUpper(word[0]));
    
}

public class UpparcasedValueProvider : IValuesProvider
{
    private readonly IValuesProvider valuesProvider;

    public UpparcasedValueProvider(IValuesProvider valuesProvider)
    {
        this.valuesProvider = valuesProvider;
    }

    public IEnumerable<string> GetValues()
    {
        foreach (var value in valuesProvider.GetValues())
        {
            yield return value.ToUpper();
        }
    }
}

public class ValuesProvider : IValuesProvider
{

    public string Name => "a";

    public IEnumerable<string> GetValues() 
    {
        yield return "jeden";
        yield return "dwa";
        yield return "trzy";
        yield return "cztery";
        yield return "pięć";
    }
}

public enum UserType {
    Janek,
    Jacek
}


